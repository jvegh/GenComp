/** \mainpage notitle

Presently, computing is in a crisis: technical and biological computing are not understood.
Technical computing consumes enormous amount of energy and shows up desperately low computing efficiency.
Payload performance of supercomputers
and \gls{ANN}s is strongly limited; computing (in general, but especially \gls{AI} and 'deep learning')
is energy-wasting and unsustainable. Biological computing is able to produce only
toy-level models, brain simulation attempts failed. Neuromophic computing cannot demonstrate
usefulnes of biological principles, interfacing biological and technical systems face severe difficulties.
The lack of understanding of computing principles result also in ideas such as attempting
building zetta-scale supercomputers, using supercomputers for heavy workload (such as \gls{AI}) applications,
and 'growing supercomputers in a dish'.

Von Neumann's theory of computing@cite EDVACreport1945 and
Shannon's theory of communication@cite ShannonOriginal:1948
must be unified and generalized.
Their common point is that they are based on the idea of instant interaction (inherited from the classic phycsics).
Both biological and technical computing (based on today's modern technology) must consider the
limited  interaction speed (conduction velocity in biology and speed of \gls{EM} waves in technology).
This change needs a different theoretical background, implementation principles and implementations.
Von Neumann' elaborated only the classic (simplified, omitting the data transmission time aside its processing time)
paradigm. It was intended to describe the '<i>vacuum tube implementation</i>' and it was perfect
for that goal. It became the starting point of the mathematical field 'computing science'.
However, it was told 'unsound' to apply the classic theory to biology, so the 'biologic computing'
has no theory at all. The technological development quickly vitiated the classic paradigm for
describing technical computing; so actually ad-hoc solutions are used instead of a perfect theory.



Here you find the scientific background of '<b>General Computing</b>' (GenComp),
also called '<b>Time-aware computing</b>' (TAC), which is essentially von Neumann's
general computing paradigm (without omitting data transfer time).
In addition, the site provides the way of its technical utilization (programming \gls{API},
Technical Guide about how and why in that way the ideas are implemented,
User's Guide with examples how to use the system, etc.).
Figure @ref Fig_GraphicAbstract provides
a picturesque overview on the effects of time-aware computing; from left to right:
the theory of \gls{TAC}; its effect on large-scale technological computing;
explaining the information storage method and learning ability in biological computing systems.
You can <a href="TAC-doc.tgz"><b>download</b></a> this documentation as a tgz archive for offline reading.
<br>


<div class="fallacy">
\anchor Fig_GraphicAbstract
@image html GraphicAbstract.png "Graphic abstract on time-aware computing and its implementation-dependent effects " width=620px
\latexonly @image latex GraphicAbstract.pdf "Graphic abstract on time-aware computing and its implementation-dependent effects " width=.8\textwidth  \endlatexonly
</div>



This is the documentation for both the notion @link GENCOMP_GEN_THEORY_PARADIGM_PAGE time-aware computing @endlink and the simulators using \gls{GenComp}.
Here <i>computing</i> is handled in a broader sense: information processing <i>in any implementation</i>.
It covers conventional computing, biomorphic computing,  biological (neural) computing, and computing relating, among others, (the technology of) artificial intelligence.
The computing objects use both their inputs and their internal state to calculate
their output. The time-aware computing means to consider that <i>computing means both processing the available data
and delivering data to and from the computing object</i>.
Furthermore, that those operations must be synchronized
(and in this way they block each other); and that not only that those processes need time,
but <i>the inputs, the output and the internal states all have their temporal behavior</i>.
We show that taking into account that temporal dependence explicitly,
leads to considerable differences in their behavior as opposed with the behavior
expected based on the time-unaware description. Please take care when reading.
The text is, of course, computing-oriented, so it uses words processor, core, thread,
hardware thread, memory, etc. However, it uses them in a slightly different way,
in a different meaning. So, please read the corresponding manual, or skim it at least,
before going into details. The approach we take seems to be overly complicated,
but it is needed to build a more effective and capable computing. It majorly simplifies
modern many-thread computing, but its real advantage manifest in large-scale computing.


The \b main \b documentation is organized into \em chapters covering different domains of features.
They are themselves composed of \em user \em manual pages describing the different features
in a comprehensive way, and \em reference pages that gives you access
to the API documentation through the related \em modules and \em classes.
Sometimes you may need our \link GLOSSARY glossary \endlink or the search engine
(see the right side of the title line).

For a first contact with \gls{GenComp}, the best place is to have a look at the \link GettingStarted getting started \endlink page
that show you how use the simulators (and, maybe, to write and compile your first time-aware simulator program) with \gls{GenComp}.
You're already an \gls{GenComp} user? Here is a \link ReleaseNotes Release notes and porting guide \endlink to help porting your application.




<div class="statcounter">
<b>Warning:</b>Please consider that this development is a one-man undertaking,
and it shall develop together with its documentation. There exist pre-developed code fragments
and docs, but it needs time to put them in a consistent state, especially that also
development and testing is needed. Please come back later and see if there is something new.
You are visitor#<a title="Visitor counter"
href="https://www.statcounter.hu/" target="_blank"><img class="statcounter"
src="https://c.statcounter.com/12506963/0/4d279618/0/" alt="Visitor counter"></a>
</div>

*/

/*
The major chapters are:
 - @link GENCOMP_BASIC BASIC: Basic-level components, such as elementary modules and communication @endlink
 - @link TAC_GENERAL_MAIN_PAGE GENERAL: non-software-related docs @endlink
 - @link GENCOMP_MODULE_SOURCES SOURCES: The simulation source files @endlink
 - @link GENCOMP_OTHER_SOURCES OTHER: The other source files (GUI, main, test) @endlink

@defgroup GENCOMP_BASIC BASIC The electronic modules
        The the bottom layer (autonomous communication) for handling a large number of electronic modules
    @defgroup GENCOMP_BASIC_USER BASIC: User's guide
        Details of how to use the communication layer
              @ingroup GENCOMP_BASIC
    @defgroup GENCOMP_BASIC_TECHNICAL  BASIC: Technical guide & programming.
              Summary of the technical operation of the BASIC system
            How the things (mainly communication) work and the \gls{API} to use them
            @ingroup GENCOMP_BASIC
              @link GENCOMP_BASIC_TECHNICAL_Breakdown_PAGE Technical breakdown of the components @endlink

              @link GENCOMP_BASIC_TECHNICAL_Communication_PAGE Communication of components @endlink

              @link GENCOMP_BASIC_TECHNICAL_Operation_PAGE Operation details @endlink

              @link GENCOMP_BASIC_TECHNICAL_MEMORY_PAGE  Memory handling @endlink

              @link GENCOMP_BASIC_TECHNICAL_Cooperation_Page Why and how modules can cooperate @endlink

    @defgroup GENCOMP_BASIC_THEORY BASIC: Theory guide & background
        The theoretical basics for the communication in the bottom layer
              @ingroup GENCOMP_BASIC

@defgroup GENCOMP_GENERAL GENERAL: The non-packet specific docs
Tell common handling for the TAC simulator family. The subclassed modules extend and specialize
    these features
     @defgroup GENCOMP_GENERAL_USER GENERAL: User's guide
     General aspects of using TAC simulators
         @ingroup GENCOMP_GENERAL
        @link GENCOMP_GEN_WORKING_PAGE Working with TAC simulators @endlink

        @link GENCOMP_GEN_USER_SETTINGS_PAGE How to use 'Settings' @endlink

    @defgroup GENCOMP_GENERAL_TECHNICAL GENERAL: Technical guide & programming
    The generally valid implementation details
              @ingroup GENCOMP_GENERAL

              @link GENCOMP_GEN_TECHNICAL_INTRODUCTION_PAGE New concepts of the technical computing  @endlink

              Introducing new concepts such us a different layering and Explicitly Many-Processor Approach

              @link GENCOMP_GEN_TECHNICAL_OPERATION_PAGE Simulating time-aware computing @endlink

**              How (technically) time-aware computing works
**    @defgroup GENCOMP_GENERAL_THEORY GENERAL: Theory guide & background
**              The theoretical basics (principles and concepts) used in time-aware computation are sketched,
**              at signaling and communication level

** @ingroup GENCOMP_GENERAL
**             @link GENCOMP_GEN_THEORY_INTRODUCTION_PAGE Introduction to computing @endlink

**              @link GENCOMP_GEN_THEORY_ABSTRACT_PAGE The abstract computing model @endlink

  **            @link GENCOMP_GEN_THEORY_LEARNING_PAGE  Information storage and learning @endlink

**              @link GENCOMP_GEN_THEORY_PARADIGM_PAGE The idea of time-aware computing @endlink


@defgroup GENCOMP_MODULE_SOURCES SOURCES: The simulation source files
The source files are built on top of each other.
Many of the are used in unchanged form, many have overloaded member functions
    @defgroup GENCOMP_MODULE_BASIC SOURCES: package BASIC
    Implementation details of the bottom (mainly communication) layer
        @ingroup GENCOMP_MODULE_SOURCES
    @defgroup GENCOMP_MODULE_PROC SOURCES: package PROC
    Implementation details of the processor-related functionality
        @ingroup GENCOMP_MODULE_SOURCES
    @defgroup GENCOMP_MODULE_NEURER SOURCES: package NEURER
    Implementation details of the time-aware neuron modeling facilities
        @ingroup GENCOMP_MODULE_SOURCES
    @defgroup GENCOMP_MODULE_MEMBRANE SOURCES: package MEMBRANE
    Implementation details of the neuron membrane (a finite element patchwork model)
        @ingroup GENCOMP_MODULE_SOURCES

** @defgroup GENCOMP_OTHER_SOURCES The other source files (GUI, main, test)
** Rarely needed source files; except if you want to branch a new development tree.

\htmlonly
<!-- Default Statcounter code for TimeAwareComputing
https://timeawarecomputing.github.io/ -->
<script type="text/javascript">
var sc_project=12506963;
var sc_invisible=0;
var sc_security="4d279618";
var scJsHost = "https://";
document.write("<sc"+"ript type='text/javascript' src='" + scJsHost+
"statcounter.com/counter/counter.js'></"+"script>");
</script>
<!-- End of Statcounter Code -->
\endhtmlonly
*/

/*

This is spare code for TAC documentation; will be reimplemented into the documentation of GenComp.
The already reimplemented lines of some paragraphs are marked by


This is the documentation for both the term @link TAC_GEN_THEORY_PARADIGM_PAGE time-aware computing @endlink and the simulators using \gls{GenComp}.
Here <i>computing</i> is handled in a broader sense: information processing <i>in any implementation</i>.
It covers conventional computing, biomorphic computing,  biological (neural) computing, and computing relating, among others, (the technology of) artificial intelligence.
The computing objects use both their inputs and their internal state to calculate
their output. The time-aware computing means to consider that <i>computing means both processing the available data
and delivering data to and from the computing object</i>.
Furthermore, that those operations must be synchronized
(and in this way they block each other); and that not only that those processes need time,
but <i>the inputs, the output and the internal states all have their temporal behavior</i>.
We show that taking into account that temporal dependence explicitly,
leads to considerable differences in their behavior as opposed with the behavior
expected based on the time-unaware description. Please take care when reading.
The text is, of course, computing-oriented, so it uses words processor, core, thread,
hardware thread, memory, etc. However, it uses them in a slightly different way,
in a different meaning. So, please read the corresponding manual, or skim it at least,
before going into details. The approach we take seems to be overly complicated,
but it is needed to build a more effective and capable computing. It majorly simplifies
modern many-thread computing, but its real advantage manifest in large-scale computing.

Here you find its scientific background, the way of technical utilization (programming \gls{API},
User's Guide with examples how to use the systems, etc.).
Figure @ref Fig_GraphicAbstract provides
a picturesque overview on the effects of time-aware computing; from left to right:
the theory of \gls{TAC}; its effect on large-scale technological computing;
explaining the information storage method and learning ability in biological computing systems.
You can <a href="TAC-doc.tgz"><b>download</b></a> this documentation as a tgz archive for offline reading.
<br>
<div class="fallacy">
\anchor Fig_GraphicAbstract
@image html GraphicAbstract.png "Graphic abstract on time-aware computing and its implementation-dependent effects " width=620px
\latexonly @image latex GraphicAbstract.pdf "Graphic abstract on time-aware computing and its implementation-dependent effects " width=.8\textwidth  \endlatexonly
</div>


The \b main \b documentation is organized into \em chapters covering different domains of features.
They are themselves composed of \em user \em manual pages describing the different features
in a comprehensive way, and \em reference pages that gives you access
to the API documentation through the related \em modules and \em classes.
Sometimes you may need our \link GLOSSARY glossary \endlink or the search engine
(see the right side of the title line).



The major chapters are:
 - @link TAC_BASIC BASIC: Basic-level components, such as elementary modules and communication @endlink
** - @link TAC_GENERAL_MAIN_PAGE GENERAL: The non-packet specific docs @endlink
 - @link TAC_MODULE_SOURCES SOURCES: The simulation source files @endlink
 - @link TAC_OTHER_SOURCES OTHER: The other source files (GUI, main, test) @endlink


@defgroup TAC_BASIC BASIC The electronic modules
        The the bottom layer (autonomous communication) for handling a large number of electronic modules
    @defgroup TAC_BASIC_USER BASIC: User's guide
        Details of how to use the communication layer
              @ingroup TAC_BASIC
    @defgroup TAC_BASIC_TECHNICAL  BASIC: Technical guide & programming.
              Summary of the technical operation of the BASIC system
            How the things (mainly communication) work and the \gls{API} to use them
            @ingroup TAC_BASIC
              @link TAC_BASIC_TECHNICAL_Breakdown_PAGE Technical breakdown of the components @endlink

              @link TAC_BASIC_TECHNICAL_Communication_PAGE Communication of components @endlink

              @link TAC_BASIC_TECHNICAL_Operation_PAGE Operation details @endlink

              @link TAC_BASIC_TECHNICAL_MEMORY_PAGE  Memory handling @endlink

              @link TAC_BASIC_TECHNICAL_Cooperation_Page Why and how modules can cooperate @endlink

    @defgroup TAC_BASIC_THEORY BASIC: Theory guide & background
        The theoretical basics for the communication in the bottom layer
              @ingroup TAC_BASIC

@defgroup TAC_GENERAL GENERAL: The non-packet specific docs
Tell common handling for the TAC simulator family. The subclassed modules extend and specialize
    these features
     @defgroup TAC_GENERAL_USER GENERAL: User's guide
     General aspects of using TAC simulators
         @ingroup TAC_GENERAL
        @link TAC_GEN_WORKING_PAGE Working with TAC simulators @endlink

        @link TAC_GEN_USER_SETTINGS_PAGE How to use 'Settings' @endlink

    @defgroup TAC_GENERAL_TECHNICAL GENERAL: Technical guide & programming
    The generally valid implementation details
              @ingroup TAC_GENERAL

              @link TAC_GEN_TECHNICAL_INTRODUCTION_PAGE New concepts of the technical computing  @endlink

              Introducing new concepts such us a different layering and Explicitly Many-Processor Approach

              @link TAC_GEN_TECHNICAL_OPERATION_PAGE Simulating time-aware computing @endlink

**              How (technically) time-aware computing works
**    @defgroup TAC_GENERAL_THEORY GENERAL: Theory guide & background
**              The theoretical basics (principles and concepts) used in time-aware computation are sketched,
**              at signaling and communication level

** @ingroup TAC_GENERAL
   **           @link TAC_GEN_THEORY_INTRODUCTION_PAGE Introduction to computing @endlink

**              @link TAC_GEN_THEORY_ABSTRACT_PAGE The abstract computing model @endlink

  **            @link TAC_GEN_THEORY_LEARNING_PAGE  Information storage and learning @endlink

**              @link TAC_GEN_THEORY_PARADIGM_PAGE The idea of time-aware computing @endlink


@defgroup TAC_MODULE_SOURCES SOURCES: The simulation source files
The source files are built on top of each other.
Many of the are used in unchanged form, many have overloaded member functions
    @defgroup TAC_MODULE_BASIC SOURCES: package BASIC
    Implementation details of the bottom (mainly communication) layer
        @ingroup TAC_MODULE_SOURCES
    @defgroup TAC_MODULE_PROC SOURCES: package PROC
    Implementation details of the processor-related functionality
        @ingroup TAC_MODULE_SOURCES
    @defgroup TAC_MODULE_NEURER SOURCES: package NEURER
    Implementation details of the time-aware neuron modeling facilities
        @ingroup TAC_MODULE_SOURCES
    @defgroup TAC_MODULE_MEMBRANE SOURCES: package MEMBRANE
    Implementation details of the neuron membrane (a finite element patchwork model)
        @ingroup TAC_MODULE_SOURCES

** @defgroup TAC_OTHER_SOURCES The other source files (GUI, main, test)
** Rarely needed source files; except if you want to branch a new development tree.


<b>Warning:</b>Please consider that this development is a one-man undertaking,
and it shall develop together with its documentation. There are pre-developed code fragments
and docs, but it needs time to put them in a consistent state, especially that also
development and testing is needed. Please come back later and see if there is something new.

*/

/*
reserve source lines
 - @link TAC_NEURER NEURER: Neural operation related stuff @endlink
 - @link TAC_MEMBRANE MEMBRANE: Finite-element modeling of neuron membrane @endlink
 - @link TAC_PROC PROC: Processor (and HThread)-level operation @endlink

 @defgroup TAC_NEURER NEURER Neural-related modules
    How
    neurons are implemented, why <i>neurers</i> are needed,
    what is their \gls{API} to use them.

    @defgroup TAC_NEURER_USER NEURER: User's guide
        The immediately user-related aspects of neurers
         @ingroup TAC_NEURER
         In this section neural-specific information is provided how the TAC_NEURER
         simulator can be used. Given that TAC is a family of simulators, in many cases
         @link TAC_GENERAL_USER the non-package specific User's guide @endlink
         is referred to.
              @link TAC_NEURER_USER Neurer user @endlink

              @link NEURER_USER_GUIDE_SETTINGS_PAGE Settings @endlink

    @defgroup TAC_NEURER_TECHNICAL NEURER: Technical guide & programming
        The technical details of neuronal operation including \gls{API}
              @ingroup TAC_NEURER
              @link TAC_NEURER_TECHNICAL_PAGE Interpreting the technological terms @endlink
    @defgroup TAC_NEURER_THEORY NEURER: Theory guide & background
        The theoretical background of neurer's operation
              @ingroup TAC_NEURER
              @link TAC_NEURER_THEORY_PAGE Interpreting the theoretical terms @endlink

            @link TAC_NEURER_TECHNICAL_SUPPORT_PAGE Support material, constants and samples @endlink

@defgroup TAC_MEMBRANE MEMBRANE Neuron membrane modeling
    Neuron membrane is modeled as a set of independent membrane patches (finite elements)

    @defgroup TAC_MEMBRANE_USER MEMBRANE: User's guide
        Describes the immediately user-related aspects
         @ingroup TAC_MEMBRANE
         This section describes how the TAC_MEMBRANE
         simulator can be used.

         @link TAC_MEMBRANE_USER_PAGE Membrane user @endlink

         @link MEMBRANE_USER_GUIDE_SETTINGS_PAGE Settings @endlink

    @defgroup TAC_MEMBRANE_TECHNICAL MEMBRANE: Technical guide & programming
        The technical details of neuronal membrane's operation including \gls{API}
              @ingroup TAC_MEMBRANE
              @link TAC_MEMBRANE_TECHNICAL_PAGE Interpreting the technological terms @endlink
    @defgroup TAC_MEMBRANE_THEORY MEMBRANE: Theory guide & background
        The theoretical background of neuron membrane's operation
              @ingroup TAC_MEMBRANE
              @link TAC_MEMBRANE_THEORY_PAGE Interpreting the theoretical terms @endlink

            @link TAC_MEMBRANE_TECHNICAL_SUPPORT_PAGE Support material, constants and samples @endlink


@defgroup TAC_PROC PROC Processor-related modules
    PROCessor-like of the upper layer
    @defgroup TAC_PROC_USER PROC: User's guide
        How to use TAC processors
              @ingroup TAC_PROC
    @defgroup TAC_PROC_TECHNICAL PROC: Technical guide & programming
        Details of technical operation of TAC processors

        @link TAC_PROC_TECHNICAL_PAGE Technological aspects of TAC/EMPA processors @endlink
              @ingroup TAC_PROC
    @defgroup TAC_PROC_THEORY PROC: Theory guide & background
        How and why in that way TAC processors work
              @ingroup TAC_PROC
        @link TAC_PROC_THEORY_PAGE Theory behind the TAC/EMPA processors @endlink


*/

/*
<!-- Default Statcounter code for TimeAwareComputing
https://timeawarecomputing.github.io/ -->
<script type="text/javascript">
var sc_project=12506963;
var sc_invisible=0;
var sc_security="4d279618";
var scJsHost = "https://";
document.write("<sc"+"ript type='text/javascript' src='" + scJsHost+
"statcounter.com/counter/counter.js'></"+"script>");
</script>
<noscript><div class="statcounter"><a title="Visitor counter"
href="https://www.statcounter.hu/" target="_blank"><img class="statcounter"
src="https://c.statcounter.com/12506963/0/4d279618/0/" alt="Visitor counter"></a></div></noscript>
<!-- End of Statcounter Code -->
<a href="https://statcounter.com/p12506963/?guest=1">Visitor statistic</a>
*/

//Under the \subpage UserManual_CustomizingTACsection, you will find discussions and examples

//Under the \subpage UserManual_Generalities section, you will find documentation
//on more general topics such as preprocessor directives,

